package base;

import java.util.Properties;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import constants.Constants;
import constants.LoadConfigurations;
import enums.Browser;
import enums.Environment;

public class TestBase {

	public static Properties propertiesContent;
	

	private WebDriver driver;
	private String browser;
	private String urlBase;
	
	public TestBase() {

		if (propertiesContent == null) {
			propertiesContent = LoadConfigurations.getProperties();
			setEnvironment();
		}

	}

	// Executado uma vez antes de iniciar os testes
	@BeforeSuite
	public void initializeDriver() {

		browser = propertiesContent.getProperty("browserName");// Ler o browser setado no arquivo de propriedades

		//Verifica qual browser está setado no arquivo de propriedades (Cross browser testing)
		try {
			if (browser.equals(Browser.CHROME.toString())) {
				driver = getChromeDriver();
		
			} else if (browser.equals(Browser.FIREFOX.toString())) {
				driver = getFirefoxDriver();

			} else if (browser.equals(Browser.IE.toString())) {
				driver = getIEDriver();
			} else {
				new Exception("Invalid Browser in properties file");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		driver.navigate().to(urlBase);

	}

	//// Executado uma vez após o ultimo teste
	@AfterSuite
	public void quitDriver() {
		driver.quit();
	}

	// Executado antes de cada teste apos iniciar a suite
	@BeforeMethod
	public void beforeMethod() {

	}

	// Executado apos cada teste apos iniciar a suite
	@AfterMethod(alwaysRun = true)
	public void afterMethod() {

	}

	private WebDriver getChromeDriver() {

		System.setProperty("webdriver.chrome.driver",
				Constants.pathToChromedriver + propertiesContent.getProperty("driverVersion") + "\\chromedriver.exe");

		ChromeOptions options = new ChromeOptions();
		options.addArguments("--start-maximized");

		// Ler o arquivo de propriedades e verificar se o parametro headlessDriver está
		// true e seta para (Browser fantasma - Antes era usado o PhantomJS)
		if (propertiesContent.getProperty("headlessDriver").equals("TRUE")) {
			options.addArguments("--headless");
		}
		driver = new ChromeDriver(options);
		return driver;
	}

	private WebDriver getFirefoxDriver() {

		System.setProperty("webdriver.gecko.driver",
				Constants.pathToFirefoxdriver + propertiesContent.getProperty("driverVersion") + "\\geckodriver.exe");

		driver = new FirefoxDriver();
		return driver;
	}

	private WebDriver getIEDriver() {

		System.setProperty("webdriver.ie.driver",
				Constants.pathToIEdriver + propertiesContent.getProperty("driverVersion") + "\\IEDriverServer.exe");

		driver = new InternetExplorerDriver();
		return driver;
	}

	public String takeScreenshot() {

		String screenshotBase64 = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BASE64);

		return screenshotBase64;

	}

	private void setEnvironment() {

		String environment = propertiesContent.getProperty("environment");

		if (environment.equals(Environment.PROD)) {
			urlBase = propertiesContent.getProperty("urlBaseProd");
		} else if (environment.equals(Environment.DEV)) {
			urlBase = propertiesContent.getProperty("urlBaseDev");
		} else if (environment.equals(Environment.HOMOL)) {
			urlBase = propertiesContent.getProperty("urlBaseHomol");
		} else if (environment.equals(Environment.LOCALHOST)) {
			urlBase = propertiesContent.getProperty("urlBaseLocal");
		} else {
			new Exception("Invalid Enviroment in properties file");
		}

	}
}
